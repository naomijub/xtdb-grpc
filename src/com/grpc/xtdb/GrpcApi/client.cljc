;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; GRPC com.grpc.xtdb.GrpcApi Client Implementation
;;;----------------------------------------------------------------------------------
(ns com.grpc.xtdb.GrpcApi.client
  (:require [com.grpc.xtdb :refer :all]
            [com.google.protobuf :as com.google.protobuf]
            [com.grpc.xtdb :as com.grpc.xtdb]
            [clojure.core.async :as async]
            [protojure.grpc.client.utils :refer [send-unary-params invoke-unary]]
            [promesa.core :as p]
            [protojure.grpc.client.api :as grpc]))

;-----------------------------------------------------------------------------
; GRPC Client Implementation
;-----------------------------------------------------------------------------

(defn status
  ([client params] (status client {} params))
  ([client metadata params]
   (let [input (async/chan 1)
         output (async/chan 1)
         desc {:service "com.grpc.xtdb.GrpcApi"
               :method  "status"
               :input   {:f com.grpc.xtdb/new-Empty :ch input}
               :output  {:f com.grpc.xtdb/pb->StatusResponse :ch output}
               :metadata metadata}]
     (-> (send-unary-params input params)
         (p/then (fn [_] (invoke-unary client desc output)))))))

(defn entity
  ([client params] (entity client {} params))
  ([client metadata params]
   (let [input (async/chan 1)
         output (async/chan 1)
         desc {:service "com.grpc.xtdb.GrpcApi"
               :method  "entity"
               :input   {:f com.grpc.xtdb/new-EntityRequest :ch input}
               :output  {:f com.grpc.xtdb/pb->EntityResponse :ch output}
               :metadata metadata}]
     (-> (send-unary-params input params)
         (p/then (fn [_] (invoke-unary client desc output)))))))

(defn entity_tx
  ([client params] (entity_tx client {} params))
  ([client metadata params]
   (let [input (async/chan 1)
         output (async/chan 1)
         desc {:service "com.grpc.xtdb.GrpcApi"
               :method  "entity_tx"
               :input   {:f com.grpc.xtdb/new-EntityTxRequest :ch input}
               :output  {:f com.grpc.xtdb/pb->EntityTxResponse :ch output}
               :metadata metadata}]
     (-> (send-unary-params input params)
         (p/then (fn [_] (invoke-unary client desc output)))))))

(defn entity_history
  ([client params] (entity_history client {} params))
  ([client metadata params]
   (let [input (async/chan 1)
         output (async/chan 1)
         desc {:service "com.grpc.xtdb.GrpcApi"
               :method  "entity_history"
               :input   {:f com.grpc.xtdb/new-EntityHistoryRequest :ch input}
               :output  {:f com.grpc.xtdb/pb->EntityHistoryResponse :ch output}
               :metadata metadata}]
     (-> (send-unary-params input params)
         (p/then (fn [_] (invoke-unary client desc output)))))))

(defn submit_tx
  ([client params] (submit_tx client {} params))
  ([client metadata params]
   (let [input (async/chan 1)
         output (async/chan 1)
         desc {:service "com.grpc.xtdb.GrpcApi"
               :method  "submit_tx"
               :input   {:f com.grpc.xtdb/new-SubmitRequest :ch input}
               :output  {:f com.grpc.xtdb/pb->SubmitResponse :ch output}
               :metadata metadata}]
     (-> (send-unary-params input params)
         (p/then (fn [_] (invoke-unary client desc output)))))))

